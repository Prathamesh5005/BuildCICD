name: Build and deploy to QA/STG

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      zipName: ${{ steps.build.outputs.zipName }}

    env:
      SOLUTION: 'AcumaticaUSSFenceCustomizations[2024R1].sln'
      PROJECT: 'AcumaticaUSSFenceCustomizations[2024R1]\AcumaticaUSSFenceCustomizations[2024R1].csproj'
      ZIP_OUTPUT: 'AcumaticaUSSFenceCustomizations[2024R1].zip'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Checkout DLL Repo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: USSBI/acumatica-packages
      #     token: ${{ secrets.****** }}
      #     path: dlls

      # - name: Copy DLLs from dll-store to project bin
      #   shell: pwsh
      #   run: |
      #     $dest = "Customization\AcumaticaUSSFenceCustomizations[2024R1]\bin\Release"
      #     if (-Not (Test-Path -LiteralPath $dest)) {
      #       New-Item -ItemType Directory -Force -Path $dest | Out-Null
      #     }
      #     Copy-Item -Path "dlls\*.dll" -Destination $dest -Force

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Build Project
        run: msbuild $env:PROJECT /p:Configuration=Release
        shell: pwsh
        env:
          PROJECT: AcumaticaUSSFenceCustomizations[2024R1]\AcumaticaUSSFenceCustomizations[2024R1].csproj
          NUGET_PACKAGES: ${{ github.workspace }}\.nuget\packages

      - name: Copy DLL to Customization Bin
        shell: pwsh
        run: |
          $projectName = "AcumaticaUSSFenceCustomizations[2024R1]"
          $dllName = "AcumaticaUSSFenceCustomizations[2024R1].dll"
          # Full source path
          $source = Join-Path -Path $PWD.Path -ChildPath "$projectName\bin\Release"
          # Destination inside the Customizations folder
          $destination = Join-Path -Path $PWD.Path -ChildPath "Customizations\$projectName\Bin"
          Write-Host "Copying built DLL from: $source"
          Write-Host "Destination path: $destination"
          if (Test-Path -LiteralPath $source) {
           New-Item -ItemType Directory -Force -Path $destination | Out-Null
            $dllSourcePath = Join-Path $source $dllName
            Copy-Item -LiteralPath $dllSourcePath -Destination $destination -Force
            Write-Host "DLL copied to $destination"
          } else {
            Write-Host "Source path not found: $source"
          }

      - name: Build Customization Package
        id: build
        shell: pwsh
        run: |
          $date = Get-Date -Format "yyyyMMdd"
          $zipName = "AcumaticaUSSFenceCustomizations[2024R1$($date)]"
          echo "zipName=$zipName" >> $env:GITHUB_OUTPUT
          pwsh ./buildCustomization.ps1 $zipName

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.zipName }}
          path: build/*.zip

  deploy_to_QA:
    needs: build
    runs-on: windows-latest
    environment:
      name: QA

    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.zipName }}

      - name: Run Publish to QA
        shell: pwsh
        env:
          ACUMATICA_URL: ${{ vars.AC_BASE_URL }}
          ACUMATICA_USERNAME: ${{ secrets.AC_USERNAME }}
          ACUMATICA_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
         ./publishCustomization.ps1 ${{ needs.build.outputs.zipName }}

      # - name: Run Publish to QA
      #   shell: pwsh
      #   env:
      #     ACUMATICA_URL: "http://localhost/USSFence/"
      #     ACUMATICA_USERNAME: "admin"
      #     ACUMATICA_PASSWORD: "Zing@2025"
      #   run: |
      #    ./publishCustomization.ps1 ${{ needs.build.outputs.zipName }}

  deploy_to_stage:
    needs: deploy_to_QA
    runs-on: self-hosted
    environment:
      name: STG

    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.zipName }}

      - name: Run Publish to Stage
        shell: pwsh
        env:
          ACUMATICA_URL: ${{ vars.AC_BASE_URL }}
          ACUMATICA_USERNAME: ${{ secrets.AC_USERNAME }}
          ACUMATICA_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
         ./publishCustomization.ps1 ${{ needs.build.outputs.zipName }}

      # - name: Run Publish to Stage
      #   shell: pwsh
      #   env:
      #     ACUMATICA_URL: "http://localhost/USSFence-qa/"
      #     ACUMATICA_USERNAME: "admin"
      #     ACUMATICA_PASSWORD: "Zing@2025"
        # run: |
        #  ./publishCustomization.ps1 ${{ needs.build.outputs.zipName }}