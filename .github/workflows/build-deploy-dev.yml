name: Build and deploy to Dev

on:
  push:
    branches:
      - 'release/v*'

  pull_request:
    branches:
      - 'release/v*'

# on:
  # workflow_dispatch:
  #   inputs:
  #     env:
  #       description: 'Environment to deploy to (e.g. Dev)'
  #       required: true
  #       default: 'dev'

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: windows-latest
    outputs:
      zipName: ${{ steps.build.outputs.zipName }}

    env:
      SOLUTION: 'AcumaticaUSSFenceCustomizations[2024R1].sln'
      PROJECT: 'AcumaticaUSSFenceCustomizations[2024R1]\AcumaticaUSSFenceCustomizations[2024R1].csproj'
      ZIP_OUTPUT: 'AcumaticaUSSFenceCustomizations[2024R1].zip'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout DLL Repo
        uses: actions/checkout@v4
        with:
          repository: USSBI/acumatica-packages
          token: ${{ secrets.GH_PAT_TOKEN }}
          path: dlls

      - name: Copy DLLs from dll-store to project bin
        shell: pwsh
        run: |
          $dest = "AcumaticaUSSFenceCustomizations[2024R1]\bin\Release"
          if (-Not (Test-Path -LiteralPath $dest)) {
            New-Item -ItemType Directory -Force -Path $dest | Out-Null
          }
          Copy-Item -Path "dlls\*.dll" -Destination $dest -Force

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Build Project
        run: msbuild $env:PROJECT /p:Configuration=Release
        shell: pwsh
        env:
          PROJECT: AcumaticaUSSFenceCustomizations[2024R1]\AcumaticaUSSFenceCustomizations[2024R1].csproj
          NUGET_PACKAGES: ${{ github.workspace }}\.nuget\packages

      - name: Copy DLL to Customization Bin
        shell: pwsh
        run: |
          $projectName = "AcumaticaUSSFenceCustomizations[2024R1]"
          $dllName = "AcumaticaUSSFenceCustomizations[2024R1].dll"

          # Full source path
          $source = Join-Path -Path $PWD.Path -ChildPath "$projectName\bin\Release"

          # Destination inside the Customizations folder
          $destination = Join-Path -Path $PWD.Path -ChildPath "Customizations\$projectName\Bin"

          Write-Host "Copying built DLL from: $source"
          Write-Host "Destination path: $destination"

          if (Test-Path -LiteralPath $source) {
           New-Item -ItemType Directory -Force -Path $destination | Out-Null

            $dllSourcePath = Join-Path $source $dllName
            Copy-Item -LiteralPath $dllSourcePath -Destination $destination -Force
            Write-Host "DLL copied to $destination"
          } else {
            Write-Host "Source path not found: $source"
          }

      # - name: Build CustomizationPackageTools.exe
      #   run: |
      #       cd CustomizationPackageTools
      #       dotnet build --configuration Release
      #       cd ..
      #   shell: pwsh

      - name: Build Customization Package
        id: build
        shell: pwsh
        run: |
          $date = Get-Date -Format "yyyyMMdd"
          $zipName = "AcumaticaUSSFenceCustomizations[2024R1$($date)]"
          echo "zipName=$zipName" >> $env:GITHUB_OUTPUT
          pwsh ./buildCustomization.ps1 $zipName

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.zipName }}
          path: build/*.zip

      - name: Run Publish to DEV
        shell: pwsh
        env:
          ACUMATICA_URL: ${{ vars.AC_BASE_URL }}
          ACUMATICA_USERNAME: ${{ secrets.AC_USERNAME }}
          ACUMATICA_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
         ./publishCustomization.ps1 ${{ steps.build.outputs.zipName }}

      # - name: Run Publish to DEV
      #   shell: pwsh
      #   env:
      #     ACUMATICA_URL: "http://localhost/USSFence/"
      #     ACUMATICA_USERNAME: "admin"
      #     ACUMATICA_PASSWORD: "Zing@2025"
      #   run: |
      #    ./publishCustomization.ps1 ${{ needs.build.outputs.zipName }}